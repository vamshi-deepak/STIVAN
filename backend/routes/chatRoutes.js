const express = require('express');
const router = express.Router();
const { handleChat, clearUserChats } = require('../controllers/chatController');
const chatFilter = require('../middleware/chatFilter');
const auth = require('../middleware/auth');
const optionalAuth = require('../middleware/optionalAuth');
const ChatMessage = require('../models/ChatMessage');

// POST /api/chat - optionally attach auth (if token provided) and apply chatFilter
// This allows both anonymous and authenticated chats. When authenticated, messages are persisted with user id.
router.post('/', optionalAuth, chatFilter, handleChat);

// GET /api/chat/history - authenticated user's chat history
router.get('/history', auth, async (req, res) => {
	try {
		const userId = req.user.userId;
		const filter = { user: userId };
		if (req.query.ideaId) filter.idea = req.query.ideaId;
		// Allow excluding autogenerated evaluation summary messages from history
		if (req.query.excludeSummaries === '1' || req.query.excludeSummaries === 'true') {
			filter['$or'] = [
				{ metadata: { $exists: false } },
				{ 'metadata.type': { $ne: 'evaluation_summary' } }
			];
		}
		const messages = await ChatMessage.find(filter).sort({ createdAt: 1 }).lean();
		res.json({ success: true, data: messages });
	} catch (err) {
		console.error('Failed to fetch chat history:', err.message);
		res.status(500).json({ success: false, message: 'Failed to fetch chat history' });
	}
});

// DELETE /api/chat/clear - Clear all chats for authenticated user
router.delete('/clear', auth, async (req, res) => {
	try {
		// delegate to controller
		return await clearUserChats(req, res);
	} catch (err) {
		console.error('Failed to clear chats route:', err.message);
		res.status(500).json({ success: false, message: 'Failed to clear chats' });
	}
});

module.exports = router;
