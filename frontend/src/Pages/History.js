import React, { useState, useEffect } from "react";
import "./CSS/History.css";
import "@fortawesome/fontawesome-free/css/all.min.css";
import { API_ENDPOINTS } from "../config/api";
import Toast from "../components/Toast/Toast";

function History() {
  const [ideas, setIdeas] = useState([]);
  const [filteredIdeas, setFilteredIdeas] = useState([]);
  const [selectedIdea, setSelectedIdea] = useState(null);
  const [viewMode, setViewMode] = useState('ideas'); // 'ideas' | 'chats'
  const [searchQuery, setSearchQuery] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [toast, setToast] = useState({ show: false, message: '', type: '' });
  const [chats, setChats] = useState([]);
  const [chatThreads, setChatThreads] = useState([]);
  const [selectedChatThread, setSelectedChatThread] = useState(null);

  useEffect(() => {
    const fetchIdeas = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(API_ENDPOINTS.ideas, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        const result = await response.json();
        if (response.ok) {
          setIdeas(result.data || []);
          setFilteredIdeas(result.data || []);
          if (result.data && result.data.length > 0) {
            setSelectedIdea(result.data[0]);
          }
        } else {
          setError(result.message || 'Failed to fetch ideas');
        }
      } catch (err) {
        setError('Network error. Please try again.');
      } finally {
        setLoading(false);
      }
    };
    fetchIdeas();

    // Fetch chat history (exclude autogenerated evaluation summaries)
    const fetchChats = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) return;
        const res = await fetch(`${API_ENDPOINTS.chatHistory}?excludeSummaries=1`, { headers: { 'Authorization': `Bearer ${token}` } });
        const result = await res.json();
        if (res.ok) {
          const msgs = result.data || [];
          setChats(msgs);
          // Group into threads by idea id (if present) or by day
          const threadsMap = {};
          msgs.forEach(m => {
            const threadKey = m.idea ? `idea-${m.idea}` : `day-${new Date(m.createdAt).toDateString()}`;
            if (!threadsMap[threadKey]) threadsMap[threadKey] = { id: threadKey, idea: m.idea || null, messages: [] };
            threadsMap[threadKey].messages.push(m);
          });
          const threads = Object.values(threadsMap).map(t => ({ ...t, lastAt: t.messages[t.messages.length-1]?.createdAt }));
          threads.sort((a,b) => new Date(b.lastAt) - new Date(a.lastAt));
          setChatThreads(threads);
          if (threads.length > 0) setSelectedChatThread(threads[0]);
        }
      } catch (err) {
        // ignore
      }
    };
    fetchChats();
  }, []);

  useEffect(() => {
    const filtered = ideas.filter(idea =>
      idea.title?.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setFilteredIdeas(filtered);
  }, [searchQuery, ideas]);

  const showToast = (type, message) => {
    setToast({ show: true, type, message });
  };

  const handleDelete = async (ideaId, e) => {
    e.stopPropagation(); // Prevent card selection when deleting
    if (!window.confirm('Are you sure you want to delete this idea?')) return;

    try {
      const token = localStorage.getItem('token');
      await fetch(`${API_ENDPOINTS.ideas}/${ideaId}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      const updatedIdeas = ideas.filter(idea => idea._id !== ideaId);
      setIdeas(updatedIdeas);
      if (selectedIdea?._id === ideaId) {
        setSelectedIdea(updatedIdeas.length > 0 ? updatedIdeas[0] : null);
      }
      showToast('success', 'Idea deleted successfully.');
    } catch (err) {
      showToast('error', 'Failed to delete idea.');
    }
  };
  
  const formatDate = (dateString) => new Date(dateString).toLocaleDateString();

  return (
    <div className="history-page-container">
      {toast.show && (
        <Toast 
          message={toast.message} 
          type={toast.type} 
          onClose={() => setToast({ ...toast, show: false })} 
        />
      )}
      <div className="history-header">
        <h2>Your Idea History</h2>
        <p>Review, search, and manage your past submissions.</p>
      </div>

      <div className="search-and-actions">
        <div className="search-bar">
          <i className="fas fa-search search-icon"></i>
          <input
            type="text"
            placeholder="Search by title..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <div className="history-toggle">
          <button className={`toggle-btn ${viewMode === 'ideas' ? 'active' : ''}`} onClick={() => setViewMode('ideas')}>Ideas</button>
          <button className={`toggle-btn ${viewMode === 'chats' ? 'active' : ''}`} onClick={() => setViewMode('chats')}>Chats</button>
        </div>
      </div>

      <div className="history-layout">
        <div className="left-list-panel">
          <div className="ideas-list-header">
            {viewMode === 'ideas' ? `Ideas (${filteredIdeas.length})` : `Chats (${chatThreads.length})`}
            <button
              className="clear-all-btn"
              onClick={async () => {
                if (viewMode === 'ideas') {
                  if (!window.confirm('Are you sure you want to delete ALL ideas and related chats? This cannot be undone.')) return;
                  try {
                    const token = localStorage.getItem('token');
                    const [ideasRes, chatsRes] = await Promise.all([
                      fetch(API_ENDPOINTS.ideasClear, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } }),
                      fetch(API_ENDPOINTS.chatClear, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } })
                    ]);
                    const ideasResult = await ideasRes.json().catch(() => ({}));
                    const chatsResult = await chatsRes.json().catch(() => ({}));
                    if (ideasRes.ok && chatsRes.ok) {
                      setIdeas([]);
                      setFilteredIdeas([]);
                      setSelectedIdea(null);
                      setChats([]);
                      setChatThreads([]);
                      setSelectedChatThread(null);
                      showToast('success', 'All ideas and chats deleted.');
                    } else {
                      const msg = (!ideasRes.ok && ideasResult.message) || (!chatsRes.ok && chatsResult.message) || 'Failed to clear ideas/chats';
                      showToast('error', msg);
                    }
                  } catch (err) {
                    showToast('error', 'Failed to clear ideas and chats');
                  }
                } else {
                  if (!window.confirm('Are you sure you want to delete ALL chats? This cannot be undone.')) return;
                  try {
                    const token = localStorage.getItem('token');
                    const res = await fetch(API_ENDPOINTS.chatClear, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });
                    const result = await res.json();
                    if (res.ok) {
                      setChats([]);
                      setChatThreads([]);
                      setSelectedChatThread(null);
                      showToast('success', 'All chats deleted.');
                    } else {
                      showToast('error', result.message || 'Failed to clear chats');
                    }
                  } catch (err) {
                    showToast('error', 'Failed to clear chats');
                  }
                }
              }}
              title={viewMode === 'ideas' ? 'Clear all ideas and chats' : 'Clear all chats'}
            >
              Clear All
            </button>
          </div>
          <div className="ideas-list">
            {viewMode === 'ideas' ? (
              loading ? <p>Loading...</p> : filteredIdeas.map(idea => (
                <div
                  key={idea._id}
                  className={`idea-list-item ${selectedIdea?._id === idea._id ? 'selected' : ''}`}
                  onClick={() => { setSelectedIdea(idea); setViewMode('ideas'); }}
                >
                  <div className="idea-item-header">
                    <span className="idea-item-title">{idea.title}</span>
                    <button className="delete-idea-btn" onClick={(e) => handleDelete(idea._id, e)}>
                      <i className="fas fa-trash-alt"></i>
                    </button>
                  </div>
                  <p className="idea-item-date">Submitted: {formatDate(idea.createdAt)}</p>
                  <p className="idea-item-score">Score: {idea.score}/100</p>
                </div>
              ))
            ) : (
              chatThreads.map(thread => (
                <div key={thread.id} className={`idea-list-item ${selectedChatThread?.id === thread.id ? 'selected' : ''}`} onClick={() => { setSelectedChatThread(thread); setViewMode('chats'); }}>
                  <div className="idea-item-header">
                    <span className="idea-item-title">{thread.idea ? `Idea: ${thread.idea}` : `Chat - ${new Date(thread.lastAt).toLocaleDateString()}`}</span>
                  </div>
                  <p className="idea-item-date">Last: {new Date(thread.lastAt).toLocaleString()}</p>
                  <p className="idea-item-score">{thread.messages.length} messages</p>
                </div>
              ))
            )}
          </div>
        </div>
        <div className="idea-details-panel">
          {loading ? (
            <div className="loading-state"><i className="fas fa-spinner fa-spin placeholder-icon"></i><p>Loading Details...</p></div>
          ) : viewMode === 'chats' && selectedChatThread ? (
            <>
              <div className="details-header">
                <h3 className="details-title">{selectedChatThread.idea ? `Chat for idea ${selectedChatThread.idea}` : `Chat - ${new Date(selectedChatThread.lastAt).toLocaleDateString()}`}</h3>
              </div>
              <div className="feedback-section">
                <div className="chat-details">
                  {selectedChatThread.messages.map((m, idx) => (
                    <div key={idx} className={`chat-row ${m.role === 'user' ? 'you' : 'bot'}`}>
                      <div className="chat-label">{m.role === 'user' ? 'You' : 'Bot'}</div>
                      <div className="chat-text">{m.text}</div>
                      <div className="chat-ts">{new Date(m.createdAt).toLocaleString()}</div>
                    </div>
                  ))}
                </div>
              </div>
            </>
          ) : selectedIdea ? (
             <>
              <div className="details-header">
                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                  <h3 className="details-title">{selectedIdea.title}</h3>
                  <div>
                    <button className="chat-btn" onClick={() => window.location.href = `/chat?ideaId=${selectedIdea._id}`}>💬 Chat about this idea</button>
                  </div>
                </div>
              </div>

              {/* Score / verdict */}
              <div className="feedback-section score-section">
                <div className="score-display">
                  <div className="score-value" style={{ color: selectedIdea.score != null ? (selectedIdea.score >= 70 ? '#27ae60' : selectedIdea.score >= 50 ? '#f39c12' : '#e74c3c') : 'inherit' }}>{selectedIdea.score ?? 'N/A'}</div>
                  <div className="score-label">/ 100</div>
                </div>
                { (selectedIdea.verdict || selectedIdea.viability) && (
                  <div className="viability-badge" style={{ background: selectedIdea.verdict && selectedIdea.verdict.toLowerCase().includes('viable') ? '#2ecc71' : selectedIdea.verdict && selectedIdea.verdict.toLowerCase().includes('promising') ? '#f1c40f' : '#e74c3c' }}>
                    {selectedIdea.verdict || selectedIdea.viability}
                  </div>
                ) }
              </div>

              {/* Score breakdown */}
              {selectedIdea.breakdown && Object.keys(selectedIdea.breakdown).length > 0 && (
                <div className="feedback-section">
                  <h3>Score Breakdown</h3>
                  <div className="breakdown-list">
                    {Object.entries(selectedIdea.breakdown).map(([key, val]) => (
                      <div className="breakdown-item" key={key}>
                        <div className="breakdown-row">
                          <div className="breakdown-label">{key.charAt(0).toUpperCase() + key.slice(1)}</div>
                          <div className="breakdown-value">{val}</div>
                        </div>
                        <div className="breakdown-bar-wrap">
                          <div className="breakdown-bar" style={{ width: `${Math.max(0, Math.min(100, val))}%`, background: val >= 70 ? '#27ae60' : val >=50 ? '#f39c12' : '#e74c3c' }} />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="feedback-section">
                <h3>Suggestions</h3>
                <ul>{selectedIdea.suggestions.map((s, i) => <li key={i}>{s}</li>)}</ul>
              </div>
             </>
          ) : (
            <div className="details-placeholder"><i className="fas fa-lightbulb placeholder-icon"></i><p>Select an item to see the details.</p></div>
          )}
        </div>
      </div>
    </div>
  );
}

export default History;